/*
Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].
*/

class Solution {
public:
	vector<int> searchRange(int A[], int n, int target) {
		int start = 0;
		int end = n - 1;
		int left = -1;
		int right = -1;
		while (start <= end)
		{
			int middle = (start + end) >> 1;
			if (A[middle] == target)
			{
				left = middle;
				end = middle - 1;
			}
			else if (A[middle] > target)
			{
				end = middle - 1;
			}
			else
			{
				start = middle + 1;
			}
		}
		start = 0;
		end = n - 1;
		while (start <= end)
		{
			int middle = (start + end) >> 1;
			if (A[middle] == target)
			{
				right = middle;
				start = middle + 1;
			}
			else if (A[middle] > target)
			{
				end = middle - 1;
			}
			else
			{
				start = middle + 1;
			}
		}
		vector<int> res;
		res.push_back(left);
		res.push_back(right);
		return res;
	}
};
