/*
Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary
For example,

Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note:
Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
*/

class Solution {
public:
	struct Node{
		string str;
		int count;
		Node(string s, int n) :str(s), count(n){}
	};
public:
	int ladderLength(string start, string end, unordered_set<string> &dict) 
	{
		if (start == end)
			return 1;
		if (isNeibours(start, end))
			return 2;
		visited.clear();
		while (!que.empty())
			que.pop();
		que.push(Node(start, 1));
		int res = 0;
		while (!que.empty())
		{
			Node NowNode(que.front());
			if (isNeibours(NowNode.str, end))
			{
				res = NowNode.count + 1;
				break;
			}
			que.pop();
			for (int i = 0; i < NowNode.str.size(); ++i)
			{
				for (int j = 0; j < 26; ++j)
				{
					string temp = NowNode.str;
					temp[i] = 'a' + j;
					if (temp != NowNode.str && dict.find(temp) != dict.end() && visited.find(temp) == visited.end())
					{
						que.push(Node(temp,NowNode.count+1));
						visited.insert(temp);
					}	
				}
			}
		}
		return res;
	}
private:
	bool isNeibours(string s1, string s2)
	{
		int count = 0;
		for (int i = 0; i < s1.size(); ++i)
		{
			if (s1[i] != s2[i])
				++count;
			if (count > 1)
				return false;
		}
		return true;
	}
private:
	unordered_set<string> visited;
	queue<Node> que;
};
