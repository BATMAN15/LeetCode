/*
Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 2,3,6,7 and target 7, 
A solution set is: 
[7] 
[2, 2, 3] 
*/

class Solution {
public:
	vector<vector<int> > combinationSum(vector<int> &candidates, int target) {
		result.clear();
		vector<int> temp;
		temp.clear();
		int sum = 0;
		sort(candidates.begin(), candidates.end());
		dfs(candidates, target, temp, sum, 0);
		vector<vector<int> >res;
		res.assign(result.begin(), result.end());
		return res;
	}
private:
	set<vector<int>> result;
	void dfs(vector<int> &candidates, int target, vector<int> temp, int sum, int start)
	{
		for (int i = start; i < candidates.size(); ++i)
		{
			temp.push_back(candidates[i]);
			if (sum + candidates[i] >= target)
			{
				if (sum + candidates[i] == target)
				{
					sort(temp.begin(), temp.end());
					if (result.find(temp) == result.end())
						result.insert(temp);
				}
				break;
			}
			dfs(candidates, target, temp, sum + candidates[i], i);
			temp.pop_back();
		}
	}
};
