/*
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
*/

class Solution {
public:
	bool isBalanced(TreeNode *root) {
		if (root == nullptr)
			return true;
		unordered_map<TreeNode*, int> tal;
		tal.clear();
		postorder(root, tal);
		stack<TreeNode*>st;
		st.push(root);
		while (!st.empty())
		{
			TreeNode *t = st.top();
			st.pop();
			if (tal[t->left] - tal[t->right] > 1 || tal[t->left] - tal[t->right] < -1)
				return false;
			if (t->right)
				st.push(t->right);
			if (t->left)
				st.push(t->left);
		}
		return true;
	}
private:
	void postorder(TreeNode *root, unordered_map<TreeNode*, int> &tal)
	{
		if (root)
		{
			postorder(root->left,tal);
			postorder(root->right,tal);
			if (root->left == nullptr && root->right == nullptr)
				tal[root] = 1;
			else if (root->left == nullptr && root->right != nullptr)
			{
				tal[root] = tal[root->right] + 1;
			}
			else if (root->left != nullptr && root->right == nullptr)
			{
				tal[root] = tal[root->left] + 1;
			}
			else
			{
				tal[root] = 1 + (tal[root->left] > tal[root->right] ? tal[root->left] : tal[root->right]);
			}
		}
	}
};
