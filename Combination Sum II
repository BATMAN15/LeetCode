/*
Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 10,1,2,7,6,1,5 and target 8, 
A solution set is: 
[1, 7] 
[1, 2, 5] 
[2, 6] 
[1, 1, 6] 
*/

class Solution {
public:
	vector<vector<int> > combinationSum2(vector<int> &num, int target) {
		result.clear();
		vector<int> temp;
		temp.clear();
		int sum = 0;
		sort(num.begin(), num.end());
		for (int i = 0; i < num.size(); ++i)
			table[i] = false;
		Backtracking(num, target, sum, 0);
		vector<vector<int> >res;
		res.assign(result.begin(), result.end());
		return res;
	}
private:
	set<vector<int>> result;
	map<int, bool> table;
	void Backtracking(vector<int> &candidates, int target, int sum, int start)
	{
		for (int i = start; i < candidates.size(); ++i)
		{
			table[i] = true;
			if (sum + candidates[i] >= target)
			{
				if (sum + candidates[i] == target)
				{
					vector<int> temp;
					for (int i = 0; i < table.size(); ++i)
					{
						if (table[i] == true)
							temp.push_back(candidates[i]);
					}
					if (result.find(temp) == result.end())
						result.insert(temp);
				}
				table[i] = false;
				break;
			}
			Backtracking(candidates, target, sum + candidates[i], i + 1);
			table[i] = false;
		}
	}
};
