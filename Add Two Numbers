/*
You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/

class Solution {
public:
	ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) 
	{
		ListNode *p1 = l1;
		ListNode *p2 = l2;
		ListNode *l = NULL;
		ListNode *node;
		int key = 0;
		int result = 0;
		node = l;
		while (p1 != NULL && p2 != NULL)
		{
			result = p1->val + p2->val + key;
			if (NULL == node)
			{
				node = new ListNode(result % 10);
				l = node;
			}
			else
			{
				node->next = new ListNode(result % 10);
				node = node->next;
			}
			key = result / 10;
			p1 = p1->next;
			p2 = p2->next;
		}
		while (p1 != NULL)
		{
			result = p1->val + key;
			node->next = new ListNode(result % 10);
			node = node->next;

			key = result / 10;
			p1 = p1->next;
		}
		while (p2 != NULL)
		{
			result = p2->val + key;
			node->next = new ListNode(result % 10);
			node = node->next;

			key = result / 10;
			p2 = p2->next;
		}
		if (key > 0)
		{
			node->next = new ListNode(key);
		}
		return l;
	}
};
