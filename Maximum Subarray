/*
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [−2,1,−3,4,−1,2,1,−5,4],
the contiguous subarray [4,−1,2,1] has the largest sum = 6.

click to show more practice.

More practice:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
*/

class Solution {
public:
	int maxSubArray(int A[], int n)
	{
		return divide(A, 0, n - 1);
	}
private:
	int divide(int A[], int left, int right)
	{
		if (left > right)
			return 0;
		if (left == right)
			return A[left];
		int middle = (left + right) >> 1;

		int lmax = A[middle], sum = 0;
		for (int i = middle; i >= left; --i)
		{
			sum += A[i];
			if (sum > lmax)
				lmax = sum;
		}

		int rmax = A[middle + 1];
		sum = 0;
		for (int i = middle + 1; i <= right; ++i)
		{
			sum += A[i];
			if (sum > rmax)
				rmax = sum;
		}
		int result = rmax + lmax;
		int l = divide(A, left, middle);
		int r = divide(A, middle + 1, right);
		if (result < l)
			result = l;
		if (result < r)
			result = r;
		
		return result;
	}
};
