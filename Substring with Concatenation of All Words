/*
You are given a string, S, and a list of words, L, that are all of the same length. Find all starting indices of substring(s) in S that is a concatenation of each word in L exactly once and without any intervening characters.

For example, given:
S: "barfoothefoobarman"
L: ["foo", "bar"]

You should return the indices: [0,9].
(order does not matter).
*/


class Solution {
public:
	vector<int> findSubstring(string S, vector<string> &L) {
		int slen = S.size();
		int llen = L.size();
		int wlen = L[0].size();
		map<string, int> words;
		for (int i = 0; i < llen; ++i)
			words[L[i]]++;

		
		vector<int> res;
		for (int i = 0; i <= slen - llen*wlen; ++i)
		{
			int j;
			map<string, int> temp;
			for (j = 0; j < llen; ++j)
			{
				string subs = S.substr(i + j*wlen, wlen);
				if (words.find(subs) == words.end())
					break;
				temp[subs]++;
				if (temp[subs] > words[subs])
					break;
			}
			if (j == llen)
				res.push_back(i);
		}
		return res;
	}
};
