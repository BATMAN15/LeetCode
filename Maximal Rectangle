/*
Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing all ones and return its area.
*/

class Solution {
public:
	int maximalRectangle(vector<vector<char> > &matrix) {
		if (matrix.size() < 1)
			return 0;
		vector<vector<int> > rectangle(matrix.size(), vector<int>(matrix[0].size() + 1));
		for (int i = 0; i < matrix.size(); ++i)
		{
			for (int j = 0; j < matrix[i].size(); ++j)
			{
				rectangle[i][j] = matrix[i][j] - '0';
				if (rectangle[i][j] == 1)
				{
					if (i > 0)
						rectangle[i][j] += rectangle[i - 1][j];
				}
			}
		}
		for (int i = 0; i < matrix.size(); ++i)
		{
			rectangle[i][matrix[i].size()] = 0;
		}

		int maxarea = 0;
		for (int i = 0; i < rectangle.size(); ++i)
		{
			stack<int> st;
			int j = 0;
			while (j < rectangle[i].size())
			{
				if (st.empty() || rectangle[i][st.top()] <= rectangle[i][j])
					st.push(j++);
				else
				{
					int hight = st.top();
					st.pop();
					maxarea = max(maxarea, rectangle[i][hight] * (st.empty() ? j : j - st.top() - 1));
				}
			}
		}
		return maxarea;
	}
};
