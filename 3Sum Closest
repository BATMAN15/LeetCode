/*
Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
*/

class Solution {
public:
	int threeSumClosest(vector<int> &num, int target) {
		sort(num.begin(), num.end());
		int sum;
		int res = 1 << 15;
		int m, n;
		for (int i = 0; i < num.size(); ++i)
		{
			if (i != 0 && num[i] == num[i - 1])
				continue;
			m = i+1, n = num.size() - 1;
			int pre = 0x7fffffff;
			while (m < n)
			{
				int cur_sum = num[i] + num[m] + num[n];
				int temp = abs(cur_sum - target);
				if (temp < res)
				{
					res = temp;
					sum = cur_sum;
				}
				if (cur_sum > target)
					--n;
				else if (cur_sum < target)
					++m;
				else
					return sum;
			}
		}
		return sum;
	}
};
