/*
Implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false
*/

class Solution {
public:
	bool isMatch(const char *s, const char *p) 
	{
		const char *backtrack_s = nullptr;
		const char *backtrack_p = nullptr;
		while (*s != '\0')
		{
			if (*p == '?' || *p == *s)
			{
				++p;
				++s;
			}
			else
			{
				if (*p == '*')
				{
					while (*p == '*')
						++p;
					if (*p == '\0')
						return true;
					backtrack_p = p;
					backtrack_s = s;
				}
				else
				{
					if (backtrack_p)
					{
						p = backtrack_p;
						s = ++backtrack_s;
					}
					else
						return false;
				}
			}
		}
		while (*p == '*')
			++p;
		return *p == '\0';
	}
};
