/*
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].
*/

class Solution {
public:
	vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
		vector<Interval> result;
		if (intervals.empty())
		{
			result.push_back(newInterval);
			return result;
		}
		vector<Interval>::iterator p;
		bool flag = false;
		for (p = intervals.begin(); p != intervals.end(); ++p)
		{
			if (p->end < newInterval.start)
			{
				result.push_back(*p);
			}
			else if (p->start > newInterval.end)
			{
				result.push_back(newInterval);
				flag = true;
				break;
			}
			else if (newInterval.end <= p->end && newInterval.start >= p->start)
			{
				flag = true;
				break;
			}
			else
			{
				newInterval.start = p->start < newInterval.start ? p->start : newInterval.start;
				newInterval.end = p->end > newInterval.end ? p->end : newInterval.end;
			}	
		}
		if (!flag)
			result.push_back(newInterval);
		else
		while (p != intervals.end())
		result.push_back(*p++);
		
		return result;
	}
};
