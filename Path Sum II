/*
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]
*/

class Solution {
public:
	vector<vector<int> > pathSum(TreeNode *root, int sum) {
		int val = 0;
		vector<int> temp;
		temp.clear();
		vector<vector<int> > result;
		result.clear();
		if (root)
		{
			temp.push_back(root->val);
			Sum(root, val + root->val, sum, temp, result);
		}
		return result;
	}
private:
	void Sum(TreeNode *root, int val, int sum, vector<int> temp, vector<vector<int> > &result)
	{
		if (root->left)
		{
			temp.push_back(root->left->val);
			Sum(root->left, val + root->left->val, sum, temp,result);
			temp.pop_back();
		}
		if (root->right)
		{
			temp.push_back(root->right->val);
			Sum(root->right, val + root->right->val, sum, temp, result);
			temp.pop_back();
		}
		if (root->left == nullptr && root->right == nullptr)
		{
			if (sum == val)
				result.push_back(temp);
		}
	}
};
