/*
Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:
Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
The solution set must not contain duplicate quadruplets.
    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)
*/

class Solution {
public:
	vector<vector<int> > fourSum(vector<int> &num, int target) {
		sort(num.begin(), num.end());
		vector<int> temp;
		vector<vector<int> > res;
		int m, n;
		int pre = 0x7fffffff;
		for (int i = 0; i < num.size(); ++i)
		{
			if (i != 0 && num[i] == num[i - 1])
				continue;
			for (int j = i + 1; j < num.size(); ++j)
			{
				if (j != i + 1 && num[j] == num[j - 1])
					continue;
				pre = 0x7fffffff;
				m = j + 1, n = num.size() - 1;
				while (m < n)
				{
					if (pre == num[m])
					{
						++m;
						continue;
					}
					int sum = num[m] + num[n] + num[i] + num[j];
					if ( sum < target)
						++m;
					else if (sum > target)
						--n;
					else
					{
						temp.clear();
						temp.push_back(num[m]);
						temp.push_back(num[i]);
						temp.push_back(num[j]);
						temp.push_back(num[n]);
						sort(temp.begin(), temp.end());
						res.push_back(temp);
						pre = num[m];
						++m, --n;
					}
				}
			}
		}
		return res;
	}
};
