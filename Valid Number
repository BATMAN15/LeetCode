/*
Validate if a given string is numeric.

Some examples:
"0" => true
" 0.1 " => true
"abc" => false
"1 a" => false
"2e10" => true
Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.
*/

class Solution {
public:
	bool isNumber(const char *s) 
	{
		if (s == nullptr)
			return false;
		while (isspace(*s))
			s++;
		if (*s == '+' || *s == '-')
			s++;
		bool point = false;
		bool num = false;
		bool e = false;
		bool space = false;
		bool aftere = false;
		while (*s != '\0')
		{
			if (isspace(*s))
			{
				space = true;
				s++;
			}
			else if (*s == '.')
			{
				if (point || e || space)
					return false;
				point = true;
				s++;
			}
			else if (*s == 'e')
			{
				char ch = *(s + 1);
				if (ch == '\0')
					return false;

				if (e || !num)
					return false;
				e = true;
				s++;
			}
			else if (*s == '+' || *s == '-')
			{
				char ch1 = *(s - 1);
				char ch2 = *(s + 1);
				if (ch1 != 'e' || !(ch2 >= '0' && ch2 <= '9'))
					return false;
				s++;
			}
			else if (*s >= '0' && *s <= '9')
			{
				if (space)
					return false;
				if (e)
					aftere = true;
				num = true;
				s++;
			}
			else
				return false;
		}
		if (!num)
			return false;
		if (e&&!aftere)
			return false;
		return true;
	}
};
