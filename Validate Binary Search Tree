/*
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.


OJ's Binary Tree Serialization:
The serialization of a binary tree follows a level order traversal, where '#' signifies a path terminator where no node exists below.

Here's an example:
   1
  / \
 2   3
    /
   4
    \
     5
The above binary tree is serialized as "{1,2,3,#,#,4,#,#,5}".
*/

class Solution {
public:
	bool isValidBST(TreeNode *root) {
		if (!root)
			return true;
		stack<TreeNode*> st;
		TreeNode *p = root;
		TreeNode *prenode = nullptr;
		while (p || !st.empty())
		{
			while (p)
			{
				st.push(p);
				p = p->left;
			}
			if (!st.empty())
			{
				p = st.top();
				st.pop();
				if (prenode && p->val <= prenode->val)
					return false;
				prenode = p;
				p = p->right;
			}
		}
		return true;
	}
};
