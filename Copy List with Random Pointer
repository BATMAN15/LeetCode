/*
A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.
*/

class Solution {
public:
	RandomListNode *copyRandomList(RandomListNode *head) 
	{
		if (head == NULL)
			return NULL;
		RandomListNode *p = head;
		while (p != NULL)
		{
			RandomListNode *temp = new RandomListNode(p->label);
			temp->next = p->next;
			p->next = temp;
			p = p->next->next;
		}
		p = head;
		while (p != NULL)
		{
			if (p->random != NULL)
				p->next->random = p->random->next;
			p = p->next->next;
		}
		p = head;
		RandomListNode *newhead = p->next;
		RandomListNode *q = newhead;
		while (p != NULL)
		{
			p->next = p->next->next;
			if (q->next != NULL)
				q->next = q->next->next;
			p = p->next;
			q = q->next;
		}
		return newhead;
	}
};
