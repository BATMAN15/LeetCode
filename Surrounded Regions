/*
Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X
*/

class Solution {
public:
	void solve(vector<vector<char> > &board) 
	{
		int m = board.size();
		if (m < 3)
			return;
		int n = board[0].size();
		if (n < 3)
			return;

		for (int i = 1; i < m - 1; i++)
		{
			dfs(board, i, 0);
			dfs(board, i, n - 1);
		}
		for (int j = 0; j < n; j++)
		{
			dfs(board, 0, j);
			dfs(board, m - 1, j);
		}
		for (int i = 0; i < m; i++)
		{
			for (int j = 0; j < n; j++)
			{
				if (board[i][j] == 'O') 
					board[i][j] = 'X';
				else if (board[i][j] == 'A') 
					board[i][j] = 'O';
			}
		}
	}
private:
	stack<int> st;
	void dfs(vector<vector<char> > &board, int x, int y)
	{
		fill_stack(board, x, y);
		while (!st.empty())
		{
			int curr = st.top();
			st.pop();
			int i = curr / board[0].size();
			int j = curr % board[0].size();

			fill_stack(board, i - 1, j);
			fill_stack(board, i + 1, j);
			fill_stack(board, i, j - 1);
			fill_stack(board, i, j + 1);
		}
	}

	void fill_stack(vector<vector<char> > &board, int x, int y)
	{
		if (x < 0 || x >= board.size() || y<0 || y >= board[0].size() || board[x][y] != 'O')
			return;
		st.push(x*board[0].size() + y);
		board[x][y] = 'A';
	}
};
