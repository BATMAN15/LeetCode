/*
Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.

Return all such possible sentences.

For example, given
s = "catsanddog",
dict = ["cat", "cats", "and", "sand", "dog"].

A solution is ["cats and dog", "cat sand dog"].
*/

class Solution {
public:
	vector<string> wordBreak(string &s, unordered_set<string> &dict)
	{
		vector<string> result;
		string str;
		vector<vector<int> > tal = gental(s, dict);
		wordbreak(result, tal, str, s);
		return result;
	}
private:
	void wordbreak(vector<string> &result, vector<vector<int> > tal, string &str, string &s, int start = 0)
	{
		if (start == s.length())
		{
			result.push_back(str);
			return;
		}	
		for (int i = 0; i < static_cast<int>(tal[start].size()); i++)
		{
			string s1 = s.substr(start, tal[start][i] - start + 1);
			if (!str.empty())
				str.push_back(' ');
			str.append(s1);
			wordbreak(result, tal, str, s, tal[start][i]+1);
			while (!str.empty() && str.back() != ' ')
				str.pop_back();
			if (!str.empty())
				str.pop_back();
		}
	}
	vector<vector<int> > gental(string s, unordered_set<string> &dict)
	{
		int n = s.length();
		vector<vector<int> > tal(n);
		for (int i = n - 1; i >= 0; i--)
		{
			string s1 = s.substr(i);
			if (dict.find(s1) != dict.end())
				tal[i].push_back(n - 1);
		}
		for (int i = n - 2; i >= 0; i--)
		{
			if (!tal[i + 1].empty())
			{
				for (int j = i; j >= 0; j--)
				{
					if (dict.find(s.substr(j, i - j + 1)) != dict.end())
						tal[j].push_back(i);
				}
			}
		}
		return tal;
	}
};
