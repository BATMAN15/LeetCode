/*
Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

You may only use constant extra space.
For example,
Given the following binary tree,
         1
       /  \
      2    3
     / \    \
    4   5    7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL
*/
    
class Solution {
public:
	void connect(TreeLinkNode *root) {
		if (root == nullptr)
			return;
		vector<vector<TreeLinkNode*> > p(2);
		int current = 0;
		int previous = 1;
		p[current].push_back(root);
		while (true)
		{
			current = !current;
			previous = !previous;
			p[current].clear();
			for (int i = 0; i < p[previous].size(); ++i)
			{
				if (p[previous][i]->left != nullptr)
					p[current].push_back(p[previous][i]->left);
				if (p[previous][i]->right != nullptr)
					p[current].push_back(p[previous][i]->right);

				if (i < p[previous].size() - 1)
					p[previous][i]->next = p[previous][i + 1];
				else if (i == p[previous].size() - 1)
					p[previous][i]->next = nullptr;
			}
			if (p[current].empty())
				break;
		}
	}
};
