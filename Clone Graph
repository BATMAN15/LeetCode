/*
Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.


OJ's undirected graph serialization:
Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/
*/

class Solution {
public:
	UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node)
	{
		if (NULL == node)
			return NULL;

		map<int, int> record;
		map<int, UndirectedGraphNode *> Map;
		stack<UndirectedGraphNode *> st;
		st.push(node);
		while (!st.empty())
		{
			UndirectedGraphNode *t = st.top();
			if (record[t->label] != 1)
			{
				record[t->label] = 1;
				Map[t->label] = new UndirectedGraphNode(t->label);
			}
			int i = 0;
			while (i < static_cast<int>(t->neighbors.size()) && record[(t->neighbors)[i]->label] == 1)
				i++;

			if (i < static_cast<int>(t->neighbors.size()))
				st.push((t->neighbors)[i]);
			else
				st.pop();
		}
		st.push(node);
		record.clear();
		while (!st.empty())
		{
			UndirectedGraphNode *t = st.top();
			if (record[t->label] != 1)
			{
				record[t->label] = 1;
				for (int i = 0; i < static_cast<int>(t->neighbors.size()); i++)
					Map[t->label]->neighbors.push_back(Map[(t->neighbors)[i]->label]);
			}
			int i = 0;
			while (i < static_cast<int>(t->neighbors.size()) && record[(t->neighbors)[i]->label] == 1)
				i++;

			if (i < static_cast<int>(t->neighbors.size()))
				st.push((t->neighbors)[i]);
			else
				st.pop();
		}
		return Map[node->label];
	}
};
