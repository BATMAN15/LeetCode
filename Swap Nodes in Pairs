/*
Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
*/

class Solution {
public:
	ListNode *swapPairs(ListNode *head) {
		if (head == nullptr || head->next == nullptr)
			return head;
		ListNode *first = head;
		ListNode *second = head->next;
		ListNode *preNode = nullptr;
		ListNode *nextNode = nullptr;
		while (first && second)
		{
			nextNode = second->next;
			first->next = nullptr;
			if (!preNode)
			{
				head = second;
			}
			else
			{
				preNode->next = second;
			}
			second->next = first;
			preNode = first;
			first = nextNode;
			if (first)
				second = first->next;
		}
		preNode->next = first;
		return head;
	}
};
