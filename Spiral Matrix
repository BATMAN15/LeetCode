/*
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

For example,
Given the following matrix:

[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
You should return [1,2,3,6,9,8,7,4,5].
*/

class Solution{
public:
	vector<int> spiralOrder(vector<vector<int> > &matrix) {
		vector<int> result;
		result.clear();
		int row = matrix.size();
		if (row < 1)
			return result;
		int column = matrix[0].size();
		int i = 0;
		int j = 0;
		while (i < row && j < column)
		{
			bool flag = false;
			for (int x = j; x < column; ++x)
				result.push_back(matrix[i][x]);
			for (int x = i + 1; x < row; ++x)
			{
				result.push_back(matrix[x][column - 1]);
				flag = true;
			}	
			if (flag)
			{
				flag = false;
				for (int x = column - 2; x >= j; --x)
				{
					result.push_back(matrix[row - 1][x]);
					flag = true;
				}	
			}
			if (flag)
			{
				for (int x = row - 2; x > i; --x)
					result.push_back(matrix[x][j]);
			}
			column--;
			row--;
			i++;
			j++;

		}
		return result;
	}
};
