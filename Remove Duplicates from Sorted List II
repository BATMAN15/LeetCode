/*
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.
*/

class Solution {
public:
	ListNode *deleteDuplicates(ListNode *head) {
		if (head == nullptr || head->next == nullptr)
			return head;
		ListNode *pre = head;
		
		bool flag = true;
		while (pre && pre->next)
		{
			if (pre->next->val != pre->val)
			{
				if (flag == true)
					break;
				else
				{
					flag = true;
					ListNode *temp = pre;
					pre = pre->next;
					delete temp;
				}
			}
			else
			{
				flag = false;
				ListNode *temp = pre;
				pre = pre->next;
				delete temp;
			}
		}
		if (flag == false)
			return nullptr;
		head = pre;
		ListNode *p = pre->next;
		flag = false;
		while (p && p->next)
		{
			if (p->next->val == p->val)
			{
				flag = true;
				ListNode *temp = p;
				pre->next = p->next;
				p = pre->next;
				delete temp;
			}
			else
			{
				if (flag == true)
				{
					flag = false;
					ListNode *temp = p;
					pre->next = p->next;
					p = pre->next;
					delete temp;
				}
				else
				{
					pre = p;
					p = pre->next;
				}
			}
		}
		if (flag == true)
		{
			ListNode *temp = p;
			pre->next = p->next;
			delete temp;
		}
		return head;
	}
};
