/*
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.
*/

class Solution {
public:
	ListNode *partition(ListNode *head, int x) {
		if (head == nullptr)
			return nullptr;
		ListNode *p = head;
		ListNode *headpre = nullptr;
		while (p)
		{
			if (p->val >= x)
				break;
			headpre = p;
			p = p->next;
		}
		if (p == nullptr)
			return head;
		ListNode *q = p->next;
		ListNode *tail = nullptr;
		ListNode *newhead = nullptr;
		ListNode *pre = p;
		while (q)
		{
			if (q->val < x)
			{
				ListNode *t = q->next;
				if (newhead == nullptr)
				{
					newhead = q;
					tail = q;
				}
				else
				{
					tail->next = q;
					tail = tail->next;
				}
				pre->next = t;
				q = t;
			}
			else
			{
				pre = q;
				q = q->next;
			}
		}
		if (newhead)
		{
			if (headpre == nullptr)
			{
				tail->next = p;
				head = newhead;
			}
			else
			{
				headpre->next = newhead;
				tail->next = p;
			}
		}
		return head;
	}
};
