/*
Given a binary tree, flatten it to a linked list in-place.

For example,
Given

         1
        / \
       2   5
      / \   \
     3   4   6
The flattened tree should look like:
   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6
click to show hints.

Hints:
If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal.
*/


class Solution {
public:
	void flatten(TreeNode *root) {
		if (root == nullptr || (root->left ==nullptr && root->right == nullptr))
			return;
		stack<TreeNode*> st;
		st.push(root);
		while (!st.empty())
		{
			TreeNode *t = st.top();
			st.pop();
			if (t->right != nullptr)
				st.push(t->right);
			if (t->left != nullptr)
				st.push(t->left);
			if (!st.empty())
				t->right = st.top();
			else
				t->right = nullptr;
			t->left = nullptr;
		}
	}
};
