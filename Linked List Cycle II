/*
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Follow up:
Can you solve it without using extra space?
*/

class Solution {
public:
	ListNode *detectCycle(ListNode *head) 
	{
		ListNode *meetNode = hasCycle(head);
		if (meetNode != NULL)
		{
			ListNode *p = head;
			while (p != meetNode)
			{
				p = p->next;
				meetNode = meetNode->next;
			}
			return p;
		}
		return NULL;
	}
		ListNode* hasCycle(ListNode *head)
	{
		if (head == NULL)
			return NULL;
		ListNode *slow = head;
		ListNode *fast = head;
		while (fast->next != NULL && fast->next->next != NULL)
		{
			slow = slow->next;
			fast = fast->next->next;
			if (slow == fast)
				return slow;
		}
		return NULL;
	}
};
