/*
Follow up for "Find Minimum in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

The array may contain duplicates.
*/

class Solution {
public:
	int findMin(vector<int> &num) 
	{
		int start = 0;
		int end = num.size() - 1;
		int mid = 0;
		while (start < end && num[start] >= num[end])
		{
			mid = start + ((end - start) >> 1);
			if (num[mid] > num[end])
					start = mid + 1;
			else if (num[mid] < num[start])
				end = mid;
			else
				start++;
		}
		return num[start];
	}
};
