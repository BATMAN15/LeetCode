/*
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

You may assume no duplicate exists in the array.
*/

class Solution {
public:
	int findMin(vector<int> &num) 
	{
		int start = 0;
		int end = num.size() - 1;
		while (start + 1 < end)
		{
			int mid = start + ((end - start) >> 1);
			if (num[start] < num[end])
				return num[start];
			if (num[mid] > num[start])
				start = mid;
			else if (num[mid] < num[end])
				end = mid;
		}
		return num[end] < num[start] ? num[end] : num[start];
	}
};
