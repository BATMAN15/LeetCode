/*
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
*/

class Solution {
public:
	int maxProfit(vector<int> &prices) 
	{
		if (prices.size() < 2)
			return 0;
		int *left = new int[prices.size()]();
		int *right = new int[prices.size()]();
		int min = prices[0];
		left[0] = 0;
		for (int i = 1; i < prices.size(); ++i)
		{
			left[i] = prices[i] - min>left[i - 1] ? prices[i] - min : left[i - 1];
			min = min < prices[i] ? min : prices[i];
		}
		right[prices.size() - 1] = 0;
		int max = prices[prices.size() - 1];
		for (int i = prices.size() - 3; i >= 0; --i)
		{
			right[i] = max-prices[i+1]>right[i + 1] ? max - prices[i+1] : right[i + 1];
			max = max > prices[i+1] ? max : prices[i+1];
		}
		int result = 0;
		for (int i = 0; i < prices.size(); ++i)
		{
			if (left[i] + right[i] > result)
				result = left[i] + right[i];
		}
		delete[] left;
		delete[] right;
		return result;
	}
};
