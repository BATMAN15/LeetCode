/*
Implement strStr().

Returns a pointer to the first occurrence of needle in haystack, or null if needle is not part of haystack.
*/


class Solution {
public:
	char* strStr(char *haystack, char *needle) {
		if (!haystack || !needle || strlen(haystack) < strlen(needle))
			return nullptr;
		int n = strlen(needle);		
		int *next = new int[n];
		generatenext(needle, next);
		int haystack_index = 0;
		int needle_index = 0;
		while (needle_index < strlen(needle) && haystack_index < strlen(haystack))
		{
			if (haystack[haystack_index] == needle[needle_index])
				++haystack_index, ++needle_index;
			else if (needle_index == 0)
				++haystack_index;
			else
				needle_index = next[needle_index - 1];
		}
		if (needle[needle_index] == '\0')
			return haystack + (haystack_index - strlen(needle));
		return nullptr;
	}
private:
	void generatenext(char *needle, int *next)
	{
		int n = strlen(needle);
		next[0] = 0;
		int index = 0;
		for (int i = 1; i < n; ++i)
		{
			index = next[i - 1];
			while (index > 0 && needle[index] != needle[i])
			{
				index = next[index-1];
			}
			if (needle[index] == needle[i])
				next[i] = index + 1;
			else
				next[i] = 0;
		}
		/*for (int i = 0; i < n; ++i)
			cout << next[i] << " ";
		cout << endl;
		*/
	}
};
