/*
 *Find the contiguous subarray within an array (containing at least one number) which has the largest product.
 *For example, given the array [2,3,-2,4],
 *the contiguous subarray [2,3] has the largest product = 6.
 */
#include<iostream>
using namespace std;

class Solution {
public:
	int maxProduct(int A[], int n) 
	{
		if (n == 1)
			return A[0];
		int max = A[0];
		int minpre = A[0];
		int maxpre = A[0];
		int minhere, maxhere;
		for (int i = 1; i < n; ++i)
		{
			maxhere = Max(maxpre*A[i], minpre*A[i], A[i]);
			minhere = Min(maxpre*A[i], minpre*A[i], A[i]);
			if (maxhere > max)
				max = maxhere;
			maxpre = maxhere;
			minpre = minhere;
		}
		return max;
	}
private:
	int Min(int a, int b, int c)
	{
		if (a <= b && a <= c)
			return a;
		else if (b <= a && b <= c)
			return b;
		else
			return c;
	}

	int Max(int a, int b, int c)
	{
		if (a >= b && a >= c)
			return a;
		else if (b >= a && b >= c)
			return b;
		else
			return c;
	}
};

int main()
{
	int A[] = { 2, -1, 1, 1};
	Solution s;
	cout << s.maxProduct(A, sizeof(A) / sizeof(int)) << endl;
	system("pause");
}
