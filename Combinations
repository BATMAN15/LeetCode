/*
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
*/

class Solution {
public:
	vector<vector<int> > combine(int n, int k) {
		vector<vector<int> > result;
		result.clear();
		if (k > n || k < 1)
			return result;
		vector<int> temp;
		for (int i = 1; i <= n; ++i)
		{
			temp.push_back(i);
			findpath(i + 1, n, temp, result, k);
			temp.pop_back();
		}
		return result;
	}
private:
	void findpath(int start, int end, vector<int> &path, vector<vector<int> > &result, int k)
	{
		if (path.size() == k)
		{
			result.push_back(path);
			return;
		}
		for (int i = start; i <= end; ++i)
		{
			path.push_back(i);
			findpath(i+1, end, path, result, k);
			path.pop_back();
		}
	}
};
