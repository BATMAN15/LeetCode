/*
Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

For example, given s = "aab",
Return

  [
    ["aa","b"],
    ["a","a","b"]
  ]
  */
  
  class Solution {
public:
	vector<vector<string> > partition(string s) {
		vector<vector<string> > res;
		vector<string> tmp;
		dfs(res, tmp, s);
		return res;
	}
private:
	void dfs(vector<vector<string> > &res, vector<string> &vc, string s)
	{
		if (s.size() == 0) 
			res.push_back(vc);
		for (int i = 1; i <= static_cast<int>(s.size()); i++){
			string substr = s.substr(0, i);
			if (isPalindrome(substr)){
				vc.push_back(substr);
				dfs(res, vc, s.substr(i));
				vc.pop_back();
			}
		}
	}
	bool isPalindrome(string s){
		int i = 0;
		int j = s.length() - 1;
		while ( i < j ){
			if (s[i++] != s[j--])
				return false;
		}
		return true;
	}
};
