/*
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
*/

class Solution {
public:
	ListNode *mergeKLists(vector<ListNode *> &lists) {

		multimap<int , ListNode*> nodes;
		for (int i = 0; i < lists.size(); ++i)
		{
			if (lists[i] != nullptr)
				nodes.insert(make_pair(lists[i]->val, lists[i]));
		}
		ListNode *head = nullptr;
		ListNode *pre = head;
		while (!nodes.empty())
		{
			if (!head)
				head = nodes.begin()->second;
			else
				pre->next = nodes.begin()->second;

			pre = nodes.begin()->second;
			ListNode *temp = nodes.begin()->second->next;
			nodes.erase(nodes.begin());
			if (temp != nullptr)
				nodes.insert(make_pair(temp->val,temp));
		}
		return head;
	}
};
