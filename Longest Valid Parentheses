/*
Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

For "(()", the longest valid parentheses substring is "()", which has length = 2.

Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.
*/

const int N = 65535;
class Solution {
public:
	int longestValidParentheses(string s) {
		vector<int> dp(s.size(), 0);
		int max = 0;
		int n = s.size();
		for (int i = 1; i < n; ++i)
		{
			if (s[i] == ')')
			{
				int j = i - 1 - dp[i - 1];
				if (j >= 0 && s[j] == '(')
				{
					dp[i] = dp[i - 1] + 2;
					if (j - 1 >= 0)
						dp[i] += dp[j - 1];
				}
			}
			if (dp[i] > max)
				max = dp[i];
		}
		return max;
	}
};
