/*
Given an index k, return the kth row of the Pascal's triangle.

For example, given k = 3,
Return [1,3,3,1].

Note:
Could you optimize your algorithm to use only O(k) extra space?
*/

class Solution {
public:
	vector<int> getRow(int rowIndex) 
	{
		if (rowIndex < 0)
			exit(1);
		int n = rowIndex + 1;
		vector<int> result(n);
		int previous = 0;
		result[0] = 1;
		for (int i = 0; i < n; ++i)
		{
			previous = 0;
			for (int j = 0; j <= i; ++j)
			{
				if (j == 0 || j == i)
				{
					result[j] = 1;
					if (previous > 0)
						result[j - 1] = previous;
				}
				else
				{
					if (previous == 0)
						previous = result[j - 1] + result[j];
					else
					{
						int temp = result[j - 1] + result[j];
						result[j - 1] = previous;
						previous = temp;
					}
				}
			}
		}
		return result;
	}
};
