/*
Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character
*/

class Solution {
public:
	int minDistance(string word1, string word2) {
		int m = word1.size();
		int n = word2.size();
		if (m == 0)
			return n;
		if (n == 0)
			return m;
		vector<vector<int> > dp(m + 1, vector<int>(n + 1, 1<<15));
		for (int i = 0; i <= m; ++i)
		{
			for (int j = 0; j <= n; ++j)
			{
				if (i == 0 || j == 0)
				{
					if (i == 0)
						dp[i][j] = j;
					else
						dp[i][j] = i;
				}
				else
				{
					dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);
					dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);
					dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + (word1[i - 1] == word2[j - 1] ? 0 : 1));
				}
			}
		}
		return dp[m][n];
	}
private:
	int min(int a, int b)
	{
		return a < b ? a : b;
	}
};
