/*
Given a set of distinct integers, S, return all possible subsets.

Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If S = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
*/

class Solution {
public:
	vector<vector<int> > subsets(vector<int> &S) {
		vector<vector<int> > result;
		if (S.empty())
			return result;
		vector<int> subsets;
		subsets.clear();
		dfs(0, S, result, subsets);
		return result;
	}
private:
	void dfs(int start, vector<int> &S, vector<vector<int> > &result, vector<int> subsets)
	{
		if (start == S.size())
		{
		    sort(subsets.begin(), subsets.end());
			result.push_back(subsets);
			return;
		}
			dfs(start + 1, S, result, subsets);
			subsets.push_back(S[start]);
			dfs(start + 1, S, result, subsets);
	}
};
