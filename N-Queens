/*
The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.



Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
*/

class Solution {
public:
	vector<vector<string> > solveNQueens(int n) {
		vector<vector<string> > result;
		result.clear();
		vector<int> board(n,0);
		Traversal(0, n, board, result);
		return result;
	}
private:
	void Traversal(int row, int n, vector<int> board, vector<vector<string> > &result)
	{
		if (row == n)
		{
			vector<string> temp;
			for (int i = 0; i < n; ++i)
			{
				string s(n,'.');
				s[board[i]] = 'Q';
				temp.push_back(s);
			}
			result.push_back(temp);
			return;
		}
		for (int j = 0; j < n; ++j)
		{
			board[row] = j;
			if (check(row, board))
				Traversal(row + 1, n, board, result);
		}
	}

	bool check(int row, vector<int> board)
	{
		for (int i = 0; i < row; ++i)
		{
			int temp = abs(board[i] - board[row]);
			if (temp == 0 || temp == row - i)
				return false;
		}
		return true;
	}
};
