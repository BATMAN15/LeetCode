/*
Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6
*/

class Solution {
public:
	int strtoi(string str)
	{
		bool flag = true;
		int result = 0;
		int i = 0;
		if (str[0] == '-')
		{
			flag = false;
			i = 1;
		}
		stack<int> st;
		for (; i < str.length(); i++)
		{
			st.push(str[i]-'0');
		}

		int size = st.size();
		while (!st.empty())
		{
			result += st.top()*(pow(10, size - st.size()));
			st.pop();
		}
		if (!flag)
			result = ~result + 1;
		return result;
	}
	int evalRPN(vector<string> &tokens) 
	{
		stack<int> st;
		int o1, o2;
		vector<string>::iterator p = tokens.begin();
		while (p != tokens.end())
		{
			if (*p != "+" && *p != "-" && *p != "*" && *p != "/")
			{
				st.push(strtoi(*p));
				p++;
			}
			else
			{
				if (st.size() < 2)
				{
					cout << "error" << endl;
					return -9999999;
				}

				o1 = st.top();
				st.pop();
				o2 = st.top();
				st.pop();

				if (*p == "+")
					st.push(o2 + o1);
				else if (*p == "-")
					st.push(o2 - o1);
				else if (*p == "*")
					st.push(o2*o1);
				else
					st.push(o2 / o1);

				p++;
			}
		}
		if (!st.empty())
			return st.top();
		else
			return -9999999;
	}
};
