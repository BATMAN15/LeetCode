/*
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.


OJ's Binary Tree Serialization:
The serialization of a binary tree follows a level order traversal, where '#' signifies a path terminator where no node exists below.

Here's an example:
   1
  / \
 2   3
    /
   4
    \
     5
The above binary tree is serialized as "{1,2,3,#,#,4,#,#,5}".
*/

class Solution {
public:
	vector<vector<int> > zigzagLevelOrder(TreeNode *root) {
		vector<vector<int> > result;
		vector<vector<TreeNode*> > tal(2);
		result.clear();
		tal.clear();
		if (root == nullptr)
			return result;
		int pre = 0;
		int cur = 1;
		tal[cur].push_back(root);
		vector<int> t;
		while (true)
		{
			pre = !pre;
			cur = !cur;
			t.clear();
			tal[cur].clear();
			for (int i = 0; i < tal[pre].size(); ++i)
			{
				TreeNode *temp = tal[pre][i];
				t.push_back(temp->val);
				if (temp->left)
					tal[cur].push_back(temp->left);
				if (temp->right)
					tal[cur].push_back(temp->right);
			}
			if (cur)
			{
				reverse(t.begin(), t.end());
			}
			result.push_back(t);
			if (tal[cur].empty())
				break;
		}
		return result;
	}
};
