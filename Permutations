/*
Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].
*/

class Solution {
public:
	vector<vector<int> > permute(vector<int> &num) 
	{
		vector<vector<int> > result;
		result.clear();
		if (num.empty())
			return result;
		for (int i = 0; i < num.size(); ++i)
			Map[num[i]] = false;

		vector<int> temp;
		dfs(temp, num, result);
		return result;
	}
private:
	map<int, bool> Map;
	void dfs(vector<int> temp, vector<int> &num, vector<vector<int> > &result)
	{
		if (temp.size() == num.size())
		{
			result.push_back(temp);
			return;
		}
		for (int i = 0; i < num.size(); ++i)
		{
			if (Map[num[i]] == false)
			{
				temp.push_back(num[i]);
				Map[num[i]] = true;
				dfs(temp, num, result);
				temp.pop_back();
				Map[num[i]] = false;
			}
		}
	}
};
